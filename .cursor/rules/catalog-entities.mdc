---
description: Backstage Catalog Entity Rules
globs: 
alwaysApply: false
---
# Backstage Catalog Entity Rules

## Entity Types and Structure

### Core Entity Types
Backstage supports several core entity types, each with specific purposes:

- **Component**: A piece of software (service, website, library)
- **API**: An interface that can be exposed by a component
- **System**: A collection of entities that cooperate to provide functionality
- **Domain**: A business area or capability
- **Resource**: Physical or virtual infrastructure
- **Group**: A team or organizational unit
- **User**: An individual person
- **Location**: A reference to external entity definitions

### Entity Definition Structure
All entities follow this basic structure in YAML:

```yaml
apiVersion: backstage.io/v1alpha1
kind: Component  # or API, System, Domain, etc.
metadata:
  name: my-service
  description: A description of the service
  annotations:
    # Various annotations for integrations
  tags:
    - backend
    - api
  links:
    - url: https://example.com
      title: Documentation
spec:
  type: service
  lifecycle: production
  owner: team-backend
  # Additional spec fields based on entity kind
```

## Component Entities

### Component Types
Common component types include:
- `service`: A backend service
- `website`: A frontend application
- `library`: A reusable code library
- `documentation`: Documentation sites

### Component Example
```yaml
apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: user-service
  description: Microservice for user management
  annotations:
    github.com/project-slug: echohello-dev/user-service
    backstage.io/techdocs-ref: dir:.
  tags:
    - backend
    - microservice
    - nodejs
  links:
    - url: https://github.com/echohello-dev/user-service
      title: Repository
    - url: https://user-service.echohello.dev
      title: Production
spec:
  type: service
  lifecycle: production
  owner: backend-team
  system: user-management
  providesApis:
    - user-api
  consumesApis:
    - auth-api
  dependsOn:
    - resource:postgres-db
```

### Component Relationships
Components can have various relationships:
- `providesApis`: APIs that this component exposes
- `consumesApis`: APIs that this component uses
- `dependsOn`: Other entities this component depends on
- `system`: The system this component belongs to

## API Entities

### API Types
Backstage supports multiple API specification formats:
- `openapi`: OpenAPI/Swagger specifications
- `asyncapi`: AsyncAPI for event-driven APIs
- `graphql`: GraphQL schemas
- `grpc`: gRPC protocol buffers

### OpenAPI Example
```yaml
apiVersion: backstage.io/v1alpha1
kind: API
metadata:
  name: user-api
  description: User management REST API
  annotations:
    github.com/project-slug: echohello-dev/user-service
spec:
  type: openapi
  lifecycle: production
  owner: backend-team
  system: user-management
  definition: |
    openapi: 3.0.0
    info:
      title: User API
      version: 1.0.0
      description: API for managing users
    paths:
      /users:
        get:
          summary: List users
          responses:
            '200':
              description: List of users
              content:
                application/json:
                  schema:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
    components:
      schemas:
        User:
          type: object
          properties:
            id:
              type: string
            name:
              type: string
            email:
              type: string
```

### AsyncAPI Example
```yaml
apiVersion: backstage.io/v1alpha1
kind: API
metadata:
  name: user-events-api
  description: User events messaging API
spec:
  type: asyncapi
  lifecycle: production
  owner: backend-team
  definition: |
    asyncapi: 2.0.0
    info:
      title: User Events API
      version: 1.0.0
    channels:
      user.created:
        publish:
          summary: User created event
          message:
            payload:
              type: object
              properties:
                userId:
                  type: string
                email:
                  type: string
                timestamp:
                  type: string
                  format: date-time
```

## System Entities

### System Structure
Systems group related components and define boundaries:

```yaml
apiVersion: backstage.io/v1alpha1
kind: System
metadata:
  name: user-management
  description: Complete user management system
  annotations:
    backstage.io/techdocs-ref: dir:.
spec:
  owner: backend-team
  domain: identity
```

### System Relationships
- Components belong to systems via `spec.system`
- Systems belong to domains via `spec.domain`
- Systems can depend on other systems

## Domain Entities

### Domain Example
```yaml
apiVersion: backstage.io/v1alpha1
kind: Domain
metadata:
  name: identity
  description: Identity and access management domain
spec:
  owner: platform-team
```

### Domain Purpose
Domains represent business capabilities and help organize systems by business function.

## Resource Entities

### Resource Types
Resources represent infrastructure components:
- `database`: Database instances
- `queue`: Message queues
- `storage`: Storage systems
- `cdn`: Content delivery networks

### Resource Example
```yaml
apiVersion: backstage.io/v1alpha1
kind: Resource
metadata:
  name: postgres-db
  description: PostgreSQL database for user data
spec:
  type: database
  owner: platform-team
  system: user-management
```

## Group and User Entities

### Group Example
```yaml
apiVersion: backstage.io/v1alpha1
kind: Group
metadata:
  name: backend-team
  description: Backend development team
spec:
  type: team
  profile:
    displayName: Backend Team
    email: backend@echohello.dev
  parent: engineering
  children: []
  members:
    - john.doe
    - jane.smith
```

### User Example
```yaml
apiVersion: backstage.io/v1alpha1
kind: User
metadata:
  name: john.doe
  description: Senior Backend Developer
spec:
  profile:
    displayName: John Doe
    email: john.doe@echohello.dev
    picture: https://avatars.githubusercontent.com/johndoe
  memberOf:
    - backend-team
```

## Annotations and Integrations

### Common Annotations
Use annotations to integrate with external tools:

```yaml
metadata:
  annotations:
    # GitHub integration
    github.com/project-slug: echohello-dev/my-service
    
    # TechDocs
    backstage.io/techdocs-ref: dir:.
    
    # Kubernetes
    backstage.io/kubernetes-id: my-service
    
    # Grafana
    grafana/dashboard-selector: "service:my-service"
    
    # PagerDuty
    pagerduty.com/integration-key: "abc123"
    
    # Sentry
    sentry.io/project-slug: my-service
    
    # SonarQube
    sonarqube.org/project-key: my-service
    
    # Jenkins
    jenkins.io/job-full-name: "folder/my-service"
```

### Custom Annotations
Create custom annotations for your plugins:

```yaml
metadata:
  annotations:
    # Custom plugin annotations
    my-plugin.io/config: |
      {
        "feature1": true,
        "threshold": 100
      }
    
    # Deployment annotations
    deployment.io/environment: production
    deployment.io/region: us-east-1
```

## Entity Validation and Schema

### Metadata Requirements
All entities must have:
- `apiVersion`: Always `backstage.io/v1alpha1`
- `kind`: The entity type
- `metadata.name`: Unique identifier
- `spec`: Type-specific specification

### Naming Conventions
Follow these naming conventions:
- Use lowercase with hyphens for names
- Keep names short but descriptive
- Use consistent prefixes for related entities
- Avoid special characters except hyphens

### Validation Rules
Entities are validated against JSON schemas:
- Names must be unique within their kind
- References to other entities must be valid
- Required fields must be present
- Enum values must match allowed options

## Entity Relationships and Dependencies

### Relationship Types
Define relationships between entities:

```yaml
# Component relationships
spec:
  system: user-management        # Belongs to system
  providesApis: [user-api]      # Provides these APIs
  consumesApis: [auth-api]      # Consumes these APIs
  dependsOn:                    # Dependencies
    - component:auth-service
    - resource:postgres-db

# System relationships
spec:
  domain: identity              # Belongs to domain

# API relationships
spec:
  system: user-management       # Belongs to system
```

### Dependency Management
Use dependencies to:
- Track service relationships
- Generate dependency graphs
- Understand impact of changes
- Plan deployments and updates

## Catalog Organization

### File Structure
Organize entity definitions in [examples/](mdc:examples):

```
examples/
├── components/
│   ├── account-management-service/
│   ├── mobile-banking-app/
│   └── ui-component-library/
├── apis/
├── systems/
├── domains/
├── resources/
├── groups/
└── users/
```

### Catalog Import
Configure catalog import in [app-config.yaml](mdc:app-config.yaml):

```yaml
catalog:
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow: [Component, System, API, Resource, Location, Domain, Group, User]
  locations:
    - type: file
      target: ../../examples/all.yaml
    - type: file
      target: ../../examples/org.yaml
```

### Location Entities
Use Location entities to reference external catalogs:

```yaml
apiVersion: backstage.io/v1alpha1
kind: Location
metadata:
  name: github-org-data
  description: GitHub organization data
spec:
  type: url
  target: https://github.com/echohello-dev/backstage-entities/blob/main/catalog.yaml
```

## Best Practices

### Entity Design
- Keep entity definitions simple and focused
- Use consistent naming across related entities
- Include meaningful descriptions and documentation
- Tag entities appropriately for discovery
- Link to relevant external resources

### Relationship Modeling
- Model relationships accurately
- Avoid circular dependencies
- Use systems to group related components
- Define clear ownership boundaries
- Document integration points

### Maintenance
- Keep entity definitions up to date
- Remove obsolete entities
- Validate entity references regularly
- Use automation for entity lifecycle management
- Monitor entity health and completeness

### Documentation
- Include TechDocs references where appropriate
- Link to external documentation
- Provide clear descriptions
- Document entity relationships
- Explain custom annotations and configurations