---
description: Backstage Development Rules
globs: 
alwaysApply: false
---
# Backstage Development Rules

## Project Overview
This is a Backstage application repository with the following key characteristics:
- Organization: echoHello
- Main app running on localhost:3000
- Backend on port 7007
- Uses better-sqlite3 database
- TechDocs enabled with local builder
- Guest authentication enabled
- Plausible analytics integration available

## File Structure Patterns

### Core Configuration Files
- [app-config.yaml](mdc:app-config.yaml) - Main application configuration
- [app-config.local.yaml](mdc:app-config.local.yaml) - Local development overrides
- [app-config.production.yaml](mdc:app-config.production.yaml) - Production configuration
- [backstage.json](mdc:backstage.json) - Backstage metadata
- [catalog-info.yaml](mdc:catalog-info.yaml) - Catalog entity definition

### Package Structure
- [packages/app/](mdc:packages/app) - Frontend React application
- [packages/backend/](mdc:packages/backend) - Backend Node.js application
- [plugins/](mdc:plugins) - Custom Backstage plugins

### Development Files
- [package.json](mdc:package.json) - Root package dependencies
- [tsconfig.json](mdc:tsconfig.json) - TypeScript configuration
- [lerna.json](mdc:lerna.json) - Monorepo management
- [yarn.lock](mdc:yarn.lock) - Dependency lock file

## TypeScript and React Patterns

### Component Development
- Use functional components with TypeScript
- Implement proper prop interfaces
- Follow Material-UI theming patterns
- Use Backstage common components (InfoCard, ErrorBoundary, etc.)

### Plugin Architecture
- Follow Backstage plugin structure in `plugins/` directory
- Implement proper plugin exports and routing
- Use Backstage APIs for authentication and data fetching

## Configuration Management

### App Config Structure
When modifying [app-config.yaml](mdc:app-config.yaml):
- Maintain the existing structure with app, backend, techdocs, auth, and catalog sections
- Use environment variables for sensitive data
- Follow Backstage configuration schema

### Environment-Specific Configs
- [app-config.local.yaml](mdc:app-config.local.yaml) for local development
- [app-config.production.yaml](mdc:app-config.production.yaml) for production
- Use `.env` files for environment variables

## Catalog and Entity Management

### Entity Definitions
When working with catalog entities in [examples/](mdc:examples):
- Follow Backstage entity schema (Component, API, System, Domain, etc.)
- Use proper metadata annotations
- Implement relationships between entities

### API Definitions
Support for multiple API types:
- OpenAPI specifications
- AsyncAPI for event-driven APIs
- GraphQL schemas
- gRPC protocol buffers

## Development Workflow

### Local Development
- Use `yarn dev` for development server
- Backend runs on port 7007, frontend on port 3000
- TechDocs available with local builder/generator

### Plugin Development
- Create new plugins in `plugins/` directory
- Follow Backstage plugin naming conventions
- Implement proper TypeScript interfaces

### Testing
- Use Jest for unit testing
- React Testing Library for component testing
- Follow test file naming conventions (*.test.ts, *.test.tsx)

## Docker and Deployment

### Container Configuration
- [Dockerfile](mdc:Dockerfile) for application containerization
- [compose.yaml](mdc:compose.yaml) for local development
- [compose.plausible.yaml](mdc:compose.plausible.yaml) for analytics

### Production Considerations
- Use production app-config
- Implement proper security measures
- Configure external databases for production

## Code Quality and Linting

### ESLint Configuration
- Follow [.eslintrc.js](mdc:.eslintrc.js) rules
- Use [.eslintignore](mdc:.eslintignore) for exclusions

### Prettier Configuration
- Follow [.prettierrc](mdc:.prettierrc) formatting rules
- Use [.prettierignore](mdc:.prettierignore) for exclusions

### Trunk Configuration
- Extensive linting and formatting tools in [.trunk/](mdc:.trunk)
- Multiple language support and tool configurations

## Documentation

### TechDocs
- Use MkDocs with [mkdocs.yaml](mdc:mkdocs.yaml) configuration
- Store documentation in `docs/` directory
- Follow TechDocs annotation patterns

### README and Documentation
- Maintain [README.md](mdc:README.md) with setup instructions
- Document plugin APIs and configurations
- Use inline code documentation

## Security and Permissions

### Authentication
- Guest authentication enabled by default
- Implement proper permission policies
- Use permission-backend-module-default plugin

### Environment Variables
- Store sensitive data in `.env` files
- Use [.env.example](mdc:.env.example) as template
- Never commit actual `.env` files

## Performance and Optimization

### Bundle Optimization
- Use code splitting for large plugins
- Implement lazy loading where appropriate
- Monitor bundle sizes

### Database Optimization
- Use better-sqlite3 for development
- Consider PostgreSQL for production
- Implement proper indexing strategies

## Monitoring and Analytics

### Plausible Integration
- Configure in app-config for analytics
- Use [compose.plausible.yaml](mdc:compose.plausible.yaml) for setup
- Monitor application usage and performance

## Best Practices

### Code Organization
- Keep components small and focused
- Use proper TypeScript types
- Implement error boundaries
- Follow Backstage design system

### Configuration Management
- Use environment-specific configs
- Validate configuration schemas
- Document configuration options

### Plugin Development
- Follow Backstage plugin lifecycle
- Implement proper error handling
- Use Backstage common utilities

### Testing Strategy
- Write unit tests for business logic
- Integration tests for API endpoints
- E2E tests for critical user flows