---
description: TypeScript Patterns for Backstage
globs: 
alwaysApply: false
---
# TypeScript Patterns for Backstage

## Core TypeScript Guidelines

### Interface Definitions
Always prefer interfaces over types for object shapes:

```typescript
// Preferred
interface ComponentProps {
  title: string;
  description?: string;
  isLoading: boolean;
}

// Avoid
type ComponentProps = {
  title: string;
  description?: string;
  isLoading: boolean;
}
```

### Backstage-Specific Types
Leverage Backstage's built-in types and interfaces:

```typescript
import { Entity } from '@backstage/catalog-model';
import { InfoCard, Progress } from '@backstage/core-components';
import { useApi, configApiRef } from '@backstage/core-plugin-api';
```

### Component Patterns

#### Functional Components
Use arrow functions for component definitions:

```typescript
import React from 'react';
import { InfoCard } from '@backstage/core-components';

interface MyComponentProps {
  entity: Entity;
  isLoading?: boolean;
}

export const MyComponent: React.FC<MyComponentProps> = ({ 
  entity, 
  isLoading = false 
}) => {
  if (isLoading) {
    return <Progress />;
  }

  return (
    <InfoCard title={entity.metadata.name}>
      {entity.metadata.description}
    </InfoCard>
  );
};
```

#### Hook Patterns
Create custom hooks for reusable logic:

```typescript
import { useApi } from '@backstage/core-plugin-api';
import { catalogApiRef } from '@backstage/plugin-catalog-react';

export const useEntityData = (entityRef: string) => {
  const catalogApi = useApi(catalogApiRef);
  const [entity, setEntity] = useState<Entity | undefined>();
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<Error | undefined>();

  useEffect(() => {
    catalogApi
      .getEntityByRef(entityRef)
      .then(setEntity)
      .catch(setError)
      .finally(() => setLoading(false));
  }, [catalogApi, entityRef]);

  return { entity, loading, error };
};
```

### API Integration Patterns

#### Backend API Handlers
Structure backend handlers with proper typing:

```typescript
import { Request, Response } from 'express';
import { Logger } from 'winston';

interface ApiRequest extends Request {
  params: {
    entityRef: string;
  };
}

export const getEntityHandler = async (
  req: ApiRequest,
  res: Response,
  logger: Logger
) => {
  try {
    const { entityRef } = req.params;
    // Implementation
    res.json({ success: true });
  } catch (error) {
    logger.error('Failed to get entity', error);
    res.status(500).json({ error: 'Internal server error' });
  }
};
```

#### Frontend API Clients
Create typed API clients:

```typescript
import { DiscoveryApi, FetchApi } from '@backstage/core-plugin-api';

export interface MyPluginApi {
  getEntityData(entityRef: string): Promise<EntityData>;
}

export class MyPluginApiClient implements MyPluginApi {
  constructor(
    private readonly discoveryApi: DiscoveryApi,
    private readonly fetchApi: FetchApi,
  ) {}

  async getEntityData(entityRef: string): Promise<EntityData> {
    const baseUrl = await this.discoveryApi.getBaseUrl('my-plugin');
    const response = await this.fetchApi.fetch(
      `${baseUrl}/entities/${encodeURIComponent(entityRef)}`
    );
    
    if (!response.ok) {
      throw new Error(`Failed to fetch entity data: ${response.statusText}`);
    }
    
    return response.json();
  }
}
```

### Error Handling Patterns

#### Component Error Boundaries
Implement proper error handling in components:

```typescript
import { ErrorBoundary } from '@backstage/core-components';

export const MyPluginPage = () => {
  return (
    <ErrorBoundary>
      <MyComponent />
    </ErrorBoundary>
  );
};
```

#### API Error Handling
Handle API errors gracefully:

```typescript
const [data, setData] = useState<Data | null>(null);
const [error, setError] = useState<string | null>(null);

useEffect(() => {
  const fetchData = async () => {
    try {
      const result = await api.getData();
      setData(result);
      setError(null);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Unknown error');
      setData(null);
    }
  };

  fetchData();
}, [api]);
```

### Configuration Patterns

#### Plugin Configuration
Define configuration interfaces:

```typescript
export interface MyPluginConfig {
  apiUrl: string;
  timeout?: number;
  retries?: number;
}

export const myPluginConfigSchema = {
  type: 'object',
  properties: {
    apiUrl: { type: 'string' },
    timeout: { type: 'number', default: 5000 },
    retries: { type: 'number', default: 3 },
  },
  required: ['apiUrl'],
};
```

### Testing Patterns

#### Component Testing
Use React Testing Library with proper TypeScript:

```typescript
import { render, screen } from '@testing-library/react';
import { TestApiProvider } from '@backstage/test-utils';
import { MyComponent } from './MyComponent';

const mockApi = {
  getData: jest.fn(),
};

describe('MyComponent', () => {
  it('renders loading state', () => {
    render(
      <TestApiProvider apis={[[myApiRef, mockApi]]}>
        <MyComponent isLoading />
      </TestApiProvider>
    );
    
    expect(screen.getByRole('progressbar')).toBeInTheDocument();
  });
});
```

#### API Testing
Test API handlers with proper typing:

```typescript
import request from 'supertest';
import { createApp } from '../app';

describe('GET /api/entities/:entityRef', () => {
  it('returns entity data', async () => {
    const app = createApp();
    
    const response = await request(app)
      .get('/api/entities/component:default/my-service')
      .expect(200);
      
    expect(response.body).toHaveProperty('metadata');
  });
});
```

### Performance Optimization

#### Memoization
Use React.memo and useMemo appropriately:

```typescript
import React, { memo, useMemo } from 'react';

interface ExpensiveComponentProps {
  data: ComplexData[];
  filter: string;
}

export const ExpensiveComponent = memo<ExpensiveComponentProps>(({ 
  data, 
  filter 
}) => {
  const filteredData = useMemo(() => 
    data.filter(item => item.name.includes(filter)),
    [data, filter]
  );

  return (
    <div>
      {filteredData.map(item => (
        <div key={item.id}>{item.name}</div>
      ))}
    </div>
  );
});
```

#### Lazy Loading
Implement code splitting for large components:

```typescript
import React, { Suspense, lazy } from 'react';
import { Progress } from '@backstage/core-components';

const LazyComponent = lazy(() => import('./LazyComponent'));

export const ParentComponent = () => {
  return (
    <Suspense fallback={<Progress />}>
      <LazyComponent />
    </Suspense>
  );
};
```

### Utility Type Patterns

#### Common Utility Types
Use TypeScript utility types effectively:

```typescript
// Pick specific properties
type EntityMetadata = Pick<Entity, 'metadata'>;

// Make properties optional
type PartialConfig = Partial<MyPluginConfig>;

// Exclude properties
type EntityWithoutSpec = Omit<Entity, 'spec'>;

// Create unions
type EntityKind = Entity['kind'];
```

#### Custom Utility Types
Create reusable utility types:

```typescript
// Extract array element type
type ArrayElement<T> = T extends (infer U)[] ? U : never;

// Make specific properties required
type RequireFields<T, K extends keyof T> = T & Required<Pick<T, K>>;

// Create branded types
type EntityRef = string & { __brand: 'EntityRef' };
```