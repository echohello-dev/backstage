---
description: Backstage Testing Patterns and Rules
globs: 
alwaysApply: false
---
# Backstage Testing Patterns and Rules

## Testing Framework Overview

### Testing Stack
Backstage uses the following testing technologies:
- **Jest**: Test runner and assertion library
- **React Testing Library**: Component testing utilities
- **Supertest**: HTTP assertion library for API testing
- **MSW (Mock Service Worker)**: API mocking
- **Playwright**: End-to-end testing (configured in [playwright.config.ts](mdc:playwright.config.ts))

### Test File Organization
Follow these naming conventions:
- Unit tests: `*.test.ts` or `*.test.tsx`
- Integration tests: `*.integration.test.ts`
- E2E tests: `*.e2e.test.ts`
- Test utilities: `*.test-utils.ts`

## Frontend Component Testing

### Basic Component Testing
Test React components using React Testing Library:

```typescript
// components/MyComponent.test.tsx
import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { TestApiProvider, wrapInTestApp } from '@backstage/test-utils';
import { MyComponent } from './MyComponent';
import { myApiRef } from '../api';

const mockApi = {
  getData: jest.fn(),
  createData: jest.fn(),
};

const renderComponent = (props = {}) => {
  return render(
    wrapInTestApp(
      <TestApiProvider apis={[[myApiRef, mockApi]]}>
        <MyComponent {...props} />
      </TestApiProvider>
    )
  );
};

describe('MyComponent', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('renders loading state', () => {
    renderComponent({ isLoading: true });
    expect(screen.getByRole('progressbar')).toBeInTheDocument();
  });

  it('renders data when loaded', async () => {
    const mockData = [{ id: '1', name: 'Test Item' }];
    mockApi.getData.mockResolvedValue(mockData);

    renderComponent();

    await waitFor(() => {
      expect(screen.getByText('Test Item')).toBeInTheDocument();
    });
  });

  it('handles user interactions', async () => {
    renderComponent();

    const button = screen.getByRole('button', { name: /create/i });
    fireEvent.click(button);

    await waitFor(() => {
      expect(mockApi.createData).toHaveBeenCalled();
    });
  });
});
```

### Testing with Backstage Context
Test components that use Backstage APIs and context:

```typescript
// components/EntityComponent.test.tsx
import React from 'react';
import { render, screen } from '@testing-library/react';
import { EntityProvider } from '@backstage/plugin-catalog-react';
import { TestApiProvider, wrapInTestApp } from '@backstage/test-utils';
import { catalogApiRef } from '@backstage/plugin-catalog-react';
import { EntityComponent } from './EntityComponent';

const mockEntity = {
  apiVersion: 'backstage.io/v1alpha1',
  kind: 'Component',
  metadata: {
    name: 'test-component',
    description: 'Test component description',
  },
  spec: {
    type: 'service',
    lifecycle: 'production',
    owner: 'team-a',
  },
};

const mockCatalogApi = {
  getEntityByRef: jest.fn(),
  getEntities: jest.fn(),
  addLocation: jest.fn(),
  removeEntityByUid: jest.fn(),
};

describe('EntityComponent', () => {
  it('renders entity information', () => {
    render(
      wrapInTestApp(
        <TestApiProvider apis={[[catalogApiRef, mockCatalogApi]]}>
          <EntityProvider entity={mockEntity}>
            <EntityComponent />
          </EntityProvider>
        </TestApiProvider>
      )
    );

    expect(screen.getByText('test-component')).toBeInTheDocument();
    expect(screen.getByText('Test component description')).toBeInTheDocument();
  });
});
```

### Testing Custom Hooks
Test custom hooks with proper setup:

```typescript
// hooks/useMyData.test.ts
import { renderHook, waitFor } from '@testing-library/react';
import { TestApiProvider } from '@backstage/test-utils';
import { useMyData } from './useMyData';
import { myApiRef } from '../api';

const mockApi = {
  getData: jest.fn(),
};

const wrapper = ({ children }: { children: React.ReactNode }) => (
  <TestApiProvider apis={[[myApiRef, mockApi]]}>
    {children}
  </TestApiProvider>
);

describe('useMyData', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('returns loading state initially', () => {
    mockApi.getData.mockImplementation(() => new Promise(() => {}));

    const { result } = renderHook(() => useMyData(), { wrapper });

    expect(result.current.loading).toBe(true);
    expect(result.current.data).toBeUndefined();
    expect(result.current.error).toBeUndefined();
  });

  it('returns data on successful fetch', async () => {
    const mockData = [{ id: '1', name: 'Test' }];
    mockApi.getData.mockResolvedValue(mockData);

    const { result } = renderHook(() => useMyData(), { wrapper });

    await waitFor(() => {
      expect(result.current.loading).toBe(false);
    });

    expect(result.current.data).toEqual(mockData);
    expect(result.current.error).toBeUndefined();
  });

  it('returns error on failed fetch', async () => {
    const mockError = new Error('API Error');
    mockApi.getData.mockRejectedValue(mockError);

    const { result } = renderHook(() => useMyData(), { wrapper });

    await waitFor(() => {
      expect(result.current.loading).toBe(false);
    });

    expect(result.current.data).toBeUndefined();
    expect(result.current.error).toEqual(mockError);
  });
});
```

## Backend API Testing

### Express Router Testing
Test backend routes using Supertest:

```typescript
// service/router.test.ts
import request from 'supertest';
import express from 'express';
import { getVoidLogger } from '@backstage/backend-common';
import { createRouter } from './router';

describe('MyPlugin Router', () => {
  let app: express.Express;

  beforeEach(async () => {
    const router = await createRouter({
      logger: getVoidLogger(),
      config: mockConfig,
      database: mockDatabase,
    });
    
    app = express().use(router);
  });

  describe('GET /items', () => {
    it('returns empty array when no items exist', async () => {
      const response = await request(app)
        .get('/items')
        .expect(200);

      expect(response.body).toEqual({ items: [] });
    });

    it('returns items when they exist', async () => {
      // Setup test data
      await setupTestData();

      const response = await request(app)
        .get('/items')
        .expect(200);

      expect(response.body.items).toHaveLength(2);
      expect(response.body.items[0]).toHaveProperty('id');
      expect(response.body.items[0]).toHaveProperty('name');
    });
  });

  describe('POST /items', () => {
    it('creates a new item', async () => {
      const newItem = {
        name: 'Test Item',
        description: 'Test Description',
      };

      const response = await request(app)
        .post('/items')
        .send(newItem)
        .expect(201);

      expect(response.body.item).toMatchObject(newItem);
      expect(response.body.item).toHaveProperty('id');
    });

    it('validates required fields', async () => {
      const invalidItem = {
        description: 'Missing name field',
      };

      const response = await request(app)
        .post('/items')
        .send(invalidItem)
        .expect(400);

      expect(response.body).toHaveProperty('error');
    });
  });

  describe('PUT /items/:id', () => {
    it('updates an existing item', async () => {
      const itemId = await createTestItem();
      const updateData = {
        name: 'Updated Name',
        description: 'Updated Description',
      };

      const response = await request(app)
        .put(`/items/${itemId}`)
        .send(updateData)
        .expect(200);

      expect(response.body.item).toMatchObject(updateData);
    });

    it('returns 404 for non-existent item', async () => {
      const response = await request(app)
        .put('/items/non-existent-id')
        .send({ name: 'Updated' })
        .expect(404);

      expect(response.body).toHaveProperty('error');
    });
  });
});
```

### Database Testing
Test database operations with proper setup and teardown:

```typescript
// database/MyPluginDatabase.test.ts
import { Knex } from 'knex';
import { TestDatabases, getVoidLogger } from '@backstage/backend-test-utils';
import { DatabaseMyPluginDatabase } from './MyPluginDatabase';

describe('DatabaseMyPluginDatabase', () => {
  const databases = TestDatabases.create();
  let knex: Knex;
  let database: DatabaseMyPluginDatabase;

  beforeAll(async () => {
    knex = await databases.init('POSTGRES_13');
    await knex.schema.createTable('items', table => {
      table.uuid('id').primary().defaultTo(knex.fn.uuid());
      table.string('name').notNullable();
      table.text('description');
      table.timestamp('created_at').defaultTo(knex.fn.now());
      table.timestamp('updated_at').defaultTo(knex.fn.now());
    });

    database = new DatabaseMyPluginDatabase(knex, getVoidLogger());
  });

  afterAll(async () => {
    await databases.shutdown();
  });

  beforeEach(async () => {
    await knex('items').del();
  });

  describe('getItems', () => {
    it('returns empty array when no items exist', async () => {
      const items = await database.getItems();
      expect(items).toEqual([]);
    });

    it('returns all items', async () => {
      await knex('items').insert([
        { name: 'Item 1', description: 'Description 1' },
        { name: 'Item 2', description: 'Description 2' },
      ]);

      const items = await database.getItems();
      expect(items).toHaveLength(2);
      expect(items[0]).toHaveProperty('name', 'Item 1');
      expect(items[1]).toHaveProperty('name', 'Item 2');
    });
  });

  describe('createItem', () => {
    it('creates a new item', async () => {
      const itemData = {
        name: 'New Item',
        description: 'New Description',
      };

      const item = await database.createItem(itemData);

      expect(item).toMatchObject(itemData);
      expect(item).toHaveProperty('id');
      expect(item).toHaveProperty('createdAt');
      expect(item).toHaveProperty('updatedAt');
    });
  });
});
```

## API Client Testing

### Mock API Responses
Test API clients with mocked responses:

```typescript
// api/MyPluginApi.test.ts
import { MyPluginApiClient } from './MyPluginApi';
import { DiscoveryApi, FetchApi } from '@backstage/core-plugin-api';

const mockDiscoveryApi: DiscoveryApi = {
  getBaseUrl: jest.fn(),
};

const mockFetchApi: FetchApi = {
  fetch: jest.fn(),
};

describe('MyPluginApiClient', () => {
  let api: MyPluginApiClient;

  beforeEach(() => {
    jest.clearAllMocks();
    (mockDiscoveryApi.getBaseUrl as jest.Mock).mockResolvedValue(
      'http://localhost:7007/api/my-plugin'
    );
    api = new MyPluginApiClient(mockDiscoveryApi, mockFetchApi);
  });

  describe('getItems', () => {
    it('fetches items successfully', async () => {
      const mockItems = [
        { id: '1', name: 'Item 1' },
        { id: '2', name: 'Item 2' },
      ];

      (mockFetchApi.fetch as jest.Mock).mockResolvedValue({
        ok: true,
        json: () => Promise.resolve(mockItems),
      });

      const items = await api.getItems();

      expect(mockFetchApi.fetch).toHaveBeenCalledWith(
        'http://localhost:7007/api/my-plugin/items'
      );
      expect(items).toEqual(mockItems);
    });

    it('throws error on failed request', async () => {
      (mockFetchApi.fetch as jest.Mock).mockResolvedValue({
        ok: false,
        statusText: 'Internal Server Error',
      });

      await expect(api.getItems()).rejects.toThrow(
        'Failed to fetch items: Internal Server Error'
      );
    });
  });

  describe('createItem', () => {
    it('creates item successfully', async () => {
      const newItem = { name: 'New Item', description: 'Description' };
      const createdItem = { id: '1', ...newItem };

      (mockFetchApi.fetch as jest.Mock).mockResolvedValue({
        ok: true,
        json: () => Promise.resolve(createdItem),
      });

      const result = await api.createItem(newItem);

      expect(mockFetchApi.fetch).toHaveBeenCalledWith(
        'http://localhost:7007/api/my-plugin/items',
        {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(newItem),
        }
      );
      expect(result).toEqual(createdItem);
    });
  });
});
```

## Integration Testing

### Plugin Integration Tests
Test complete plugin functionality:

```typescript
// integration/plugin.integration.test.ts
import { createServiceBuilder } from '@backstage/backend-common';
import { Server } from 'http';
import request from 'supertest';
import { createRouter } from '../src/service/router';

describe('MyPlugin Integration', () => {
  let server: Server;
  let baseUrl: string;

  beforeAll(async () => {
    const service = createServiceBuilder(module)
      .loadConfig()
      .addRouter('/my-plugin', await createRouter({
        logger: getVoidLogger(),
        config: mockConfig,
        database: mockDatabase,
      }));

    server = await service.start().catch(err => {
      console.error(err);
      process.exit(1);
    });

    const port = (server.address() as any)?.port;
    baseUrl = `http://localhost:${port}`;
  });

  afterAll(async () => {
    await new Promise<void>((resolve, reject) => {
      server.close(err => (err ? reject(err) : resolve()));
    });
  });

  it('handles complete item lifecycle', async () => {
    // Create item
    const createResponse = await request(baseUrl)
      .post('/my-plugin/items')
      .send({ name: 'Test Item', description: 'Test Description' })
      .expect(201);

    const itemId = createResponse.body.item.id;

    // Get items
    const getResponse = await request(baseUrl)
      .get('/my-plugin/items')
      .expect(200);

    expect(getResponse.body.items).toHaveLength(1);
    expect(getResponse.body.items[0].id).toBe(itemId);

    // Update item
    await request(baseUrl)
      .put(`/my-plugin/items/${itemId}`)
      .send({ name: 'Updated Item' })
      .expect(200);

    // Delete item
    await request(baseUrl)
      .delete(`/my-plugin/items/${itemId}`)
      .expect(204);

    // Verify deletion
    const finalResponse = await request(baseUrl)
      .get('/my-plugin/items')
      .expect(200);

    expect(finalResponse.body.items).toHaveLength(0);
  });
});
```

## End-to-End Testing

### Playwright E2E Tests
Test complete user workflows using Playwright:

```typescript
// e2e/my-plugin.e2e.test.ts
import { test, expect } from '@playwright/test';

test.describe('MyPlugin E2E', () => {
  test.beforeEach(async ({ page }) => {
    await page.goto('/my-plugin');
  });

  test('displays plugin page', async ({ page }) => {
    await expect(page.locator('h1')).toContainText('My Plugin');
  });

  test('creates new item', async ({ page }) => {
    // Click create button
    await page.click('[data-testid="create-item-button"]');

    // Fill form
    await page.fill('[data-testid="item-name-input"]', 'Test Item');
    await page.fill('[data-testid="item-description-input"]', 'Test Description');

    // Submit form
    await page.click('[data-testid="submit-button"]');

    // Verify item appears in list
    await expect(page.locator('[data-testid="item-list"]')).toContainText('Test Item');
  });

  test('edits existing item', async ({ page }) => {
    // Assuming an item already exists
    await page.click('[data-testid="edit-item-button"]');
    
    await page.fill('[data-testid="item-name-input"]', 'Updated Item');
    await page.click('[data-testid="submit-button"]');

    await expect(page.locator('[data-testid="item-list"]')).toContainText('Updated Item');
  });
});
```

## Test Utilities and Helpers

### Custom Test Utilities
Create reusable test utilities:

```typescript
// test-utils/index.ts
import React from 'react';
import { render, RenderOptions } from '@testing-library/react';
import { TestApiProvider, wrapInTestApp } from '@backstage/test-utils';
import { myApiRef } from '../src/api';

// Mock API factory
export const createMockApi = () => ({
  getItems: jest.fn(),
  createItem: jest.fn(),
  updateItem: jest.fn(),
  deleteItem: jest.fn(),
});

// Custom render function
interface CustomRenderOptions extends Omit<RenderOptions, 'wrapper'> {
  apis?: Array<[any, any]>;
}

export const renderWithProviders = (
  ui: React.ReactElement,
  options: CustomRenderOptions = {}
) => {
  const { apis = [], ...renderOptions } = options;
  const mockApi = createMockApi();
  
  const defaultApis = [[myApiRef, mockApi], ...apis];

  const Wrapper = ({ children }: { children: React.ReactNode }) => (
    wrapInTestApp(
      <TestApiProvider apis={defaultApis}>
        {children}
      </TestApiProvider>
    )
  );

  return {
    ...render(ui, { wrapper: Wrapper, ...renderOptions }),
    mockApi,
  };
};

// Test data factories
export const createTestItem = (overrides = {}) => ({
  id: '1',
  name: 'Test Item',
  description: 'Test Description',
  createdAt: new Date().toISOString(),
  updatedAt: new Date().toISOString(),
  ...overrides,
});

export const createTestEntity = (overrides = {}) => ({
  apiVersion: 'backstage.io/v1alpha1',
  kind: 'Component',
  metadata: {
    name: 'test-component',
    description: 'Test component',
  },
  spec: {
    type: 'service',
    lifecycle: 'production',
    owner: 'team-a',
  },
  ...overrides,
});
```

## Testing Best Practices

### Test Organization
- Group related tests using `describe` blocks
- Use descriptive test names that explain the expected behavior
- Follow the Arrange-Act-Assert pattern
- Keep tests focused and independent

### Mocking Strategies
- Mock external dependencies at the boundary
- Use real implementations for internal logic
- Prefer dependency injection for testability
- Mock time-dependent operations

### Assertion Patterns
- Use specific assertions over generic ones
- Test both positive and negative cases
- Verify error handling and edge cases
- Assert on user-visible behavior, not implementation details

### Test Data Management
- Use factories for creating test data
- Clean up test data between tests
- Use realistic test data
- Avoid hardcoded values in assertions

### Performance Considerations
- Run tests in parallel when possible
- Use test databases for isolation
- Mock expensive operations
- Profile and optimize slow tests

### CI/CD Integration
- Run tests on every commit
- Fail builds on test failures
- Generate test coverage reports
- Run different test types in appropriate stages