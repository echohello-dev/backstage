Create a comprehensive Product Requirements Document (PRD) task specification file in the `.tasks/` directory. This prompt implements advanced AI workflow patterns for disciplined coding partnerships.

## Task Creation Process

### Step 1: Gather

Ask the user for the following information if not provided:

- Task identifier: Unique name for the task (e.g., `monitoring-dashboards`, `backup-automation`)
- Problem description: What issue this task solves
- Success criteria: Measurable outcomes that indicate completion (e.g., `The monitoring dashboard is deployed and accessible`)

### Step 2: Analyze

- Review the existing codebase to understand the current state of the application and infrastructure.

### Step 3: Generate Task Specification

Create a task file at `.tasks/${taskIdentifier}.task.md` using the template structure:

## Required Template Structure

````markdown
# ${taskIdentifier}

Created: `${currentDate}`
Status: `${status}`

## Problem Statement

${problemDescription}

## Success Criteria

- [ ] ${criterion1}
- [ ] ${criterion2}
- [ ] ${criterion3}

## Implementation

### Phase ${phase}

${phaseDescription}

#### Task ${task}

${taskDescription}

## Technical Specifications

### Architecture Context

${architectureContext}

### Security Requirements

${securityRequirements}

### Performance Requirements

${performanceRequirements}

## File Modifications Required

${fileModifications}

## Environment Variables & Secrets

${environmentConfig}

## Dependencies & Prerequisites

${prerequisites}

## Risk Assessment

${riskAssessment}

## AI Instructions

- Decompose the task into smaller, manageable tasks when executing the task
- Do not execute the task until you have a plan
- Read existing code patterns in similar components
- Understand the infrastructure context
- Validate plan against success criteria
- Get explicit approval: "Plan approved. Proceed with implementation."
- Plan First: Create comprehensive implementation plan before coding
- Sequential Execution: Complete only the first unchecked item, mark it `[x]`, then proceed
- Explicit Permission: Wait for "Plan approved. Proceed" before implementation
- Context Awareness: Always consider infrastructure patterns and security requirements
- Quality Gates: Validate each phase before proceeding to next
- Use MCP: Use MCP tools when needed like getting the time
- Check if the dev server is running
- Read README.md and package.json for commands
- Use Puppeteer to view webpages
- Use a date script or time MCP to get the current date time

After Implementation:

- Validate the implementation against the success criteria
- Update the task documentation with the results
- Review your work and update the progress log

## Progress Log

### ${currentDate} - ${taskIdentifier}

- Initial task specification created
- Requirements gathered and analyzed
- Implementation plan created
- Implementation completed
- Validation completed
- Documentation updated
