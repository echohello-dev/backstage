---
description: Task management, systematic approach for handling complex website update projects, based on the successful execution of the project
globs: 
alwaysApply: false
---
# Task Management

This rule defines the systematic approach for handling complex website update projects, based on the successful execution of the TMJ Electrical solar services expansion task.

## Task File Structure & Management

### Initial Analysis Phase

When encountering a task file (`.tasks/*.task.md`):

1. **Read the entire task file** to understand scope and requirements
2. **Identify all success criteria** and implementation phases
3. **Map dependencies** between different components
4. **Assess current codebase** structure before making changes
5. **Plan sequential execution** to avoid conflicts

### Implementation Approach

#### Phase-Based Execution

Execute tasks in logical phases to maintain system integrity:

1. **Content Updates First**: Update YAML configuration files

   - `content/services.yaml` - Service definitions
   - `content/brands.yaml` - Brand partnerships
   - `content/business-info.yaml` - Contact information
   - `content/team/*.md` - Team member information

2. **File Structure Changes**: Handle renames and reorganization

   - Project file renames
   - Image file renames with descriptive naming
   - Folder structure updates
   - Path reference updates

3. **Code Fixes**: Address any build errors

   - Fix undefined variable references
   - Update import statements
   - Validate component props

4. **Testing & Validation**: Ensure everything works
   - Run `pnpm run build` to validate
   - Check for TypeScript errors
   - Verify all pages render correctly

#### Content Management Patterns

**Service Updates**:

```yaml
# Always add new services to all relevant categories
# Remove deprecated services consistently
# Update service descriptions to be specific and actionable
services:
  - slug: category-name
    title: 'Standardized Category Name Services'
    items:
      - 'Specific service with action verb'
      - 'EV charging installation' # Solar services
      - 'Solar panel installation'
      - 'Solar battery storage'
```

**Brand Management**:

```yaml
# Prefer SVG format for scalability
# Include proper URLs for brand websites
# Remove outdated partnerships cleanly
brands:
  - name: 'Brand Name'
    logo: '/uploads/brands/brand-name.svg'
    url: 'https://brand-website.com/'
```

**Project Portfolio**:

```yaml
# Use descriptive, location-based naming
# Include comprehensive service lists
# Maintain consistent image alt text and captions
---
title: 'Location Descriptive Project Name'
location: 'Suburb, State, Country'
services:
  - 'Specific Service Type'
  - 'Technical Implementation'
gallery:
  - image: '/path/to/descriptive-filename.jpg'
    alt: 'Descriptive alt text for accessibility'
    caption: 'Detailed caption explaining the technical work'
---
```

### File Naming Conventions

**Images**: Use descriptive names instead of generic camera names

- `IMG_1156.jpeg` → `luxury-car-showroom-lounge-area.jpeg`
- Include location and subject matter
- Use kebab-case for consistency

**Projects**: Use location-based naming

- `cobblebank-luxury-bathroom-renovation.md` → `essendon-luxury-bathroom-renovation.md`
- Update all references when renaming
- Maintain folder structure consistency

### Error Handling & Debugging

**Common Issues**:

1. **Undefined Variables**: Check for references to removed or renamed items

   ```typescript
   // Fix: Replace undefined serviceItems with actual data
   {
     service.items.map((item, index) => (
       <option key={index} value={item}>
         {item}
       </option>
     ));
   }
   ```

2. **Path References**: Update all file paths when moving files

   ```yaml
   # Update image paths in project files
   featured_image: '/uploads/projects/new-folder-name/image.jpg'
   ```

3. **Build Validation**: Always test build before committing
   ```bash
   pnpm run build  # Must pass before deployment
   ```

### Task File Maintenance

#### Status Tracking

Update task files with completion status:

```markdown
**Status:** `Completed`
**Completed:** `YYYY-MM-DD`

## Success Criteria

- [x] Completed item with checkmark
- [ ] Future task item

## Implementation Plan

### Phase 1: Analysis & Design

- [x] All completed items marked
```

#### Documentation Standards

Include comprehensive implementation summary:

```markdown
## Implementation Summary

### Completed Work (Date)

**Services Updated:**

- Specific changes made
- Technical details

**Technical:**

- Build status
- Error fixes applied
- Deployment readiness

### Git Commit
```

Commit: hash
Message: descriptive commit message
Files: X changed, Y insertions, Z deletions

```

```

#### Future Task Planning

Identify and document remaining work:

```markdown
## Future Tasks

- [ ] Specific next steps
- [ ] Integration requirements
- [ ] Enhancement opportunities
```

### Git Workflow

**Commit Strategy**:

1. **Single comprehensive commit** for related changes
2. **Descriptive commit messages** with bullet points
3. **Include file change summary** in commit description

**Example**:

```bash
git commit -m "Complete website updates for solar services expansion - Updated service section headers - Added solar services to all categories - Updated brand logos - Fixed build errors - All changes tested"
```

### Quality Assurance

**Pre-Commit Checklist**:

- [ ] All task success criteria met
- [ ] Build passes without errors
- [ ] No TypeScript/linting errors
- [ ] All file paths updated correctly
- [ ] Task file updated with completion status
- [ ] Future tasks identified

**Post-Implementation**:

- [ ] Monitor for any deployment issues
- [ ] Validate form submissions work
- [ ] Confirm all content displays correctly
- [ ] Update stakeholders on completion

## Agent Behavior Guidelines

### Communication Style

- **Explain actions clearly** before executing
- **Provide progress updates** during long operations
- **Summarize completed work** comprehensively
- **Identify future opportunities** proactively

### Problem-Solving Approach

1. **Analyze before acting** - understand the full scope
2. **Work systematically** - complete phases in logical order
3. **Test continuously** - validate changes as you go
4. **Document thoroughly** - update task files and commit messages
5. **Plan ahead** - identify future tasks and dependencies

### Error Recovery

- **Fix build errors immediately** when encountered
- **Validate all references** when moving or renaming files
- **Test edge cases** like form submissions and image loading
- **Rollback capability** - maintain clean git history for easy reversion

This systematic approach ensures complex projects are completed successfully with minimal risk and maximum documentation for future reference.
